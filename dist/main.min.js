;(function() {
    let openBurgerMenu = document.querySelector(".hamburger");
    let burgerMenu = document.querySelector(".burger-menu");
    let closeBurgerMenu = document.querySelector(".burger-menu__close");
    let burgerMenuLink = document.querySelectorAll(".burger-menu__link");
    
    openBurgerMenu.addEventListener("click", (e) => {
      e.preventDefault();
      burgerMenu.classList.add("burger-menu-active");
    });
    
    burgerMenuLink.forEach(item => {
      item.addEventListener("click", (e) => {
        burgerMenuLink.forEach(link => {
          link.classList.remove("burger-link-active");
        });
    
        item.classList.add("burger-link-active")
        if (item.classList.contains("burger-link-active")) {
          burgerMenu.classList.remove("burger-menu-active");
        }
      });
    });
    
    closeBurgerMenu.addEventListener("click", (e) => {
      e.preventDefault();
      burgerMenu.classList.remove("burger-menu-active");
    });
    })()
    
    
    
    // $(".hamburger").on("click", function (event) {
    //   $('.burger-menu').addClass("burger-menu-active");
    // });
    
    // $(".burger-menu__close").on("click", function (event) {
    //   $('.burger-menu').removeClass("burger-menu-active");
    // });
    
    // $(".burger-item").on("click", function (event) {
    //   $('.burger-menu').removeClass("burger-menu-active");
    // });;//jquery
const mesureWidth = item => {
    let reqItemWidth = 0;
  
    const screenWidth = $(window).width();
    const container = item.closest(".menu-acco__list");
    const titlesBlocks = container.find(".menu-acco__button");
    const titlesWidth = titlesBlocks.width() * titlesBlocks.length;
  
    const textContainer = item.find(".menu-acco__desc");
    const paddingLeft = parseInt(textContainer.css("padding-left"));
    const paddingRight = parseInt(textContainer.css("padding-right"));
  
    const isMobile = window.matchMedia("(max-width: 786px)").matches;
  
    if (isMobile) {
      reqItemWidth = screenWidth - titlesWidth;
    } else {
      reqItemWidth = 500;
    }
  
    return {
      container: reqItemWidth,
      textContainer: reqItemWidth - paddingRight - paddingLeft
    }
  };
  
  const closeEveryItemInContainer = container => {
    const items = container.find(".menu-acco__item");
    const content = container.find(".menu-acco__content");
  
    items.removeClass("active");
    content.width(0);
  }
  
  const openItem = (item) => {
    const hiddenContent = item.find(".menu-acco__content");
    const reqWidth = mesureWidth(item);
    const textBlock = item.find(".menu-acco__desc");
  
    item.addClass("active");
    hiddenContent.width(reqWidth.container);
    textBlock.width(reqWidth.textContainer);
  }
  
  $(".menu-acco__button").on("click", e => {
    e.preventDefault();
  
    const $this = $(e.currentTarget);
    const item = $this.closest(".menu-acco__item");
    const itemOpened = item.hasClass("active");
    const container = $this.closest(".menu-acco__list");
  
    if (itemOpened) {
      closeEveryItemInContainer(container)
    } else {
      closeEveryItemInContainer(container)
      openItem(item);
    }
  });
  
  
  //js 
  // const menu = document.querySelector("#horizontalMenu");
  // const items = document.querySelectorAll(".menu-acco__item");
  
  // const getItemWidth = (item) => {
  //   let resultWidth = 524;
  //   const windowWidth = window.innerWidth;
  //   const itemWidth = item.offsetWidth;
  
  //   const isTablet = window.matchMedia("(max-width: 768px)").matches;
  //   const isMobile = window.matchMedia("(max-width: 480px)").matches;
  
  //   if (isTablet) {
  //     resultWidth = windowWidth - itemWidth * items.length;
  //   }
  
  //   if (isMobile) {
  //     resultWidth = windowWidth - itemWidth;
  //   }
  
  //   return resultWidth;
  // };
  
  // const setItemWidth = (item, width) => {
  //   const itemContent = item.nextElementSibling;
  //   const itemText = itemContent.firstElementChild;
  //   itemContent.style.width = `${width}px`;
  //   itemText.style.width = `${width}px`;
  // };
  
  // const closeItem = (item) => {
  //   const itemParent = item.parentElement;
  //   itemParent.classList.remove("menu-acco__item--active");
  //   item.classList.remove("menu-acco__button--active");
  //   setItemWidth(item, 0);
  // };
  
  // const openItem = (item) => {
  //   const itemParent = item.parentElement;
  //   itemParent.classList.add("menu-acco__item--active");
  //   item.classList.add("menu-acco__button--active");
  //   const width = getItemWidth(item);
  //   setItemWidth(item, width);
  // };
  
  // menu.addEventListener("click", (e) => {
  //   e.preventDefault();
  //   const target = e.target;
  //   const isActive = target.classList.contains("menu-acco__button--active");
  //   const activeElement = document.querySelector(".menu-acco__button--active");
  
  //   if (target.classList.contains("menu-acco__button") && isActive) {
  //     if (activeElement) {
  //       closeItem(activeElement);
  //     }
  //   }
  //   if (target.classList.contains("menu-acco__button") && !isActive) {
  //     if (activeElement) {
  //       closeItem(activeElement);
  //     }
  //     openItem(target);
  //   }
  // });
  
  // window.addEventListener("resize", () => {
  //   const activeButton = document.querySelector(".menu-acco__button--active");
  //   if (activeButton) {
  //     closeItem(activeButton);
  //   }
  // });;;let myMap;
const init = () => {
 myMap = new ymaps.Map("map", {
  center: [55.752004, 37.576133],
   zoom: 16,
   controls: [],
 });
 
 let coords = [
     [55.752004, 37.576133],
   ],
   myCollection = new ymaps.GeoObjectCollection({}, {
     draggable: false,
     iconLayout: 'default#image',
     iconImageHref: './img/icons/geo.svg',
     iconImageSize: [58, 73],
     iconImageOffset: [-35, -52]
   });
 
 for (let i = 0; i < coords.length; i++) {
   myCollection.add(new ymaps.Placemark(coords[i]));
 }
 
 myMap.geoObjects.add(myCollection);
 
 myMap.behaviors.disable('scrollZoom');
};
 
ymaps.ready(init);;const validateFields = (form, fieldsArray) => {
 
    fieldsArray.forEach((field) => {
      field.removeClass("input-error");
      if (field.val().trim() === "") {
        field.addClass("input-error");
      }
    });
  
    const errorFields = form.find(".input-error");
  
    return errorFields.length === 0;  
  }
  
  $(".form").submit(e => {
    e.preventDefault();
  
    const form = $(e.currentTarget);
    const name = form.find("[name='name']");
    const phone = form.find("[name='phone']");
    const comment = form.find("[name='comment']");
    const to = form.find("[name='to']");
  
    const modal = $("#modal");
    const content = modal.find(".modal__content");
  
    modal.removeClass("error-modal");
  
    const isValid = validateFields(form, [name, phone, comment, to]);
  
    if (isValid) {
      const request = $.ajax({
        url: "https://webdev-api.loftschool.com/sendmail",
        method: "post",
        data: {
          name: name.val(),
          phone: phone.val(),
          comment: comment.val(),
          to: to.val(),
        },
      });
  
      request.done(data => {
        content.text(data.message)
        modal.addClass("success-modal");
      });
  
      request.fail(data => {
        const message = data.responseJSON.message;
        content.text(message);
        modal.addClass("error-modal");
      });
  
      request.always(() => {
        $.fancybox.open({
          src: "#modal",
          type: "inline",
          smallBtn: false
        });
      });
    }
  });
  
  $(".app-submit-btn").click(e => {
    e.preventDefault();
  
    $.fancybox.close();
  });;(function() {
    const sections = $("section");
    const display = $(".maincontent");
    const sideMenu = $(".fixed-menu");
    const menuItems = sideMenu.find(".fixed-menu__item");
    
    const mobileDetect = new MobileDetect(window.navigator.userAgent);
    const isMobile = mobileDetect.mobile();
    
    
    let inScroll = false;
    
    sections.first().addClass("active");
    
    const countSectionPosition = sectionEq => {
      const position = sectionEq * -100;
    
      if (isNaN(position)) {
        console.error("передано неверное значение в countSectionPosition");
        return 0;
      }
    
      return position;
    }
    
    const changeMenuThemeForSection = sectionEq => {
      const currentSection = sections.eq(sectionEq);
      const menuTheme = currentSection.attr("data-sidemenu-theme");
      const sideMenuLink = $(".fixed-menu__link");
      const activeClass = ("fixed-menu--shadowed");
    
    
      if (menuTheme === "black") {
        sideMenu.addClass(activeClass),
          sideMenuLink.addClass("fixed-menu__link--shadowed");
      } else {
        sideMenu.removeClass("fixed-menu--shadowed"),
          sideMenuLink.removeClass("fixed-menu__link--shadowed");
      }
    }
    
    const resetActiveClassForItem = (items, itemEq, activeClass) => {
      items.eq(itemEq).addClass(activeClass).siblings().removeClass(activeClass);
    }
    
    const performTransition = (sectionEq) => {
      if (inScroll) return;
    
      const transitionOver = 1000;
      const mouseInertiaOver = 0;
    
      inScroll = true;
    
      const position = countSectionPosition(sectionEq);
    
      changeMenuThemeForSection(sectionEq);
    
      display.css({
        transform: `translateY(${position}%)`,
      });
    
      resetActiveClassForItem(sections, sectionEq, "active");
    
      setTimeout(() => {
        inScroll = false;
    
        resetActiveClassForItem(menuItems, sectionEq, "fixed-menu__item--active");
      }, transitionOver + mouseInertiaOver);
    
    };
    
    const viewportScroller = () => {
      const activeSection = sections.filter(".active");
      const nextSection = activeSection.next();
      const prevSection = activeSection.prev();
    
      return {
        next() {
          if (nextSection.length) {
            performTransition(nextSection.index());
          }
        },
        prev() {
          if (prevSection.length) {
            performTransition(prevSection.index());
          }
        },
      };
    };
    
    $(window).on("wheel", (e) => {
      const deltaY = e.originalEvent.deltaY;
      const scroller = viewportScroller();
    
      if (deltaY > 0) {
        scroller.next();
      }
    
      if (deltaY < 0) {
        scroller.prev();
      }
    });
    
    $(window).on("keydown", (e) => {
      const tagName = e.target.tagName.toLowerCase();
      const userTypingInInputs = tagName === "input" || tagName === "textarea";
      const scroller = viewportScroller();
    
      if (userTypingInInputs) return;
    
      switch (e.keyCode) {
        case 38:
          scroller.prev();
          break;
    
        case 40:
          scroller.next();
          break;
      }
    });
    
    $(".wrapper").on("touchmove", e => e.preventDefault());
    
    $("[data-scroll-to]").click((e) => {
      e.preventDefault();
    
      const $this = $(e.currentTarget);
      const target = $this.attr("data-scroll-to");
      const reqSection = $(`[data-section-id=${target}]`);
    
      performTransition(reqSection.index());
    });
    
    if (isMobile) {
    //https://github.com/mattbryson/TouchSwipe-Jquery-Plugin
    
    $("body").swipe({
      swipe: function (event, direction) {
        const scroller = viewportScroller();
        let scrollDirection = "";
        
        if (direction === "up") scrollDirection = "next";
        if (direction === "down") scrollDirection = "prev";
    
        if (scrollDirection) {
          scroller[scrollDirection]();
        }
      },
    });
    }
    })();;(function() {
    const findBlockByAlias = (alias) => {
      return $(".review__item").filter((ndx, item) => {
        return $(item).attr("data-linked-with") === alias;
      });
    };
    
    $(".interactive-avatar__link").click((e) => {
      e.preventDefault();
    
      const $this = $(e.currentTarget);
      const target = $this.attr("data-open");
      const itemToShow = findBlockByAlias(target);
      const curItem = $this.closest(".review__switcher-item",".interactive-avatar");
    
      itemToShow.addClass("review__item--active").siblings().removeClass("review__item--active");
      curItem.addClass("interactive-avatar--active").siblings().removeClass("interactive-avatar--active");
    });
    })();;(function() {
    const slider = $('.products__list').bxSlider({
      pager: false,
      controls: false,
    });
    
    $(".products__arrow--prev").click((e) => {
      e.preventDefault();
      slider.goToPrevSlide();
    });
    
    $(".products__arrow--next").click((e) => {
      e.preventDefault();
      slider.goToNextSlide();
    });
    })();;(function() {
    const openItem = item => {
      const container = item.closest(".team__item");
      const contentBlock = container.find(".team__content");
      const textBlock = contentBlock.find(".team__content-block"); 
      const reqHeight = textBlock.height();
      const svgIcon = container.find(".team__icon-img");
      const colorText = container.find(".team__name");
    
      container.addClass("active");
      svgIcon.addClass("team__icon-img--active");
      colorText.addClass("team__name--color");
      contentBlock.height(reqHeight);
    }
    
    const closeEveryItem = container => {
      const items = container.find(".team__content");
      const itemContainer = container.find(".team__item");
      const itemSvgIcon = container.find(".team__icon-img");
      const itemColorText = container.find(".team__name");
    
      itemContainer.removeClass("active");
      itemSvgIcon.removeClass("team__icon-img--active");
      itemColorText.removeClass("team__name--color");
      items.height(0);
    }
    
    $(".team__button").click(e => {
      const $this = $(e.currentTarget);
      const container = $this.closest(".team__list");
      const elemContainer = $this.closest(".team__item");
    
      if (elemContainer.hasClass("active")) {
        closeEveryItem(container);
      } else {
        closeEveryItem(container);
        openItem($this);
      }
    });
    })();let player;

const formatTime = timeSec => {
  const roundTime = Math.round(timeSec);

  const minutes = Math.floor(roundTime / 60);
  const seconds = roundTime - minutes * 60;

  const formattedSeconds = seconds < 10 ? `0${seconds}` : seconds;

  return `${minutes}:${formattedSeconds}`;
};

const onPlayerReady = () => {
  let interval;
  let durationSec = player.getDuration();

  $(".player__duration-estimate").text(formatTime(durationSec));

  if (typeof interval !== "undefined") {
    clearInterval(interval);
  }

  interval = setInterval(() => {
    const completedSec = player.getCurrentTime();
    const completedPercent = (completedSec / durationSec) * 100;

    $(".player__playback-button").css({
      left: `${completedPercent}%`
    });

    $(".player__duration-completed").text(formatTime(completedSec));
  }, 1000);
};

const eventsInit = () => {
  $(".player__start").on("click", e => {
    e.preventDefault();
    const btn = $(e.currentTarget);

    if (btn.hasClass("paused")) {
      player.pauseVideo();
    } else {
      player.playVideo();
    }
  });

  $(".player__playback").on("click", e => {
    const bar = $(e.currentTarget);
    const newButtonPosition = e.pageX - bar.offset().left;
    const buttonPosPercent = (newButtonPosition / bar.width()) * 100;
    const newPlayerTimeSec = (player.getDuration() / 100) * buttonPosPercent;

    $(".player__playback-button").css({
      left: `${buttonPosPercent}%`
    });

    player.seekTo(newPlayerTimeSec);
  });

  $(".player__splash").on("click", e => {
    player.playVideo();
  });
};

const onPlayerStateChange = event => {
  const playerButton = $(".player__start");
  /*
  -1 (воспроизведение видео не начато)
  0 (воспроизведение видео завершено)
  1 (воспроизведение)
  2 (пауза)
  3 (буферизация)
  5 (видео подают реплики).
   */
  switch (event.data) {
    case 1: 
      $('.player__wrapper').addClass('active');
      playerButton.addClass("paused");
      break;
    case 2: 
      playerButton.removeClass("paused");
      break;
  }
};

function onYouTubeIframeAPIReady() {
  player = new YT.Player("yt-player", {
    height: "405",
    width: "660",
    videoId: "7AkbUfZjS5k",
    events: {
      onReady: onPlayerReady,
      onStateChange: onPlayerStateChange
    },
    playerVars: {
      controls: 0,
      disablekb: 0,
      showinfo: 0,
      rel: 0,
      autoplay: 0,
      modestbranding: 0
    }
  });
}

eventsInit();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
